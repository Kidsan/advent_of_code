package main

import (
	"reflect"
	"strings"
	"testing"
)

func Test_hexToBinary(t *testing.T) {
	type args struct {
		input string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{name: "example", args: args{input: "D2FE28"}, want: "110100101111111000101000"},
		{
			name: "example",
			args: args{
				input},
			want
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := hexToBinary(tt.args.input); got != tt.want {
				t.Errorf("hexToBinary() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestParse(t *testing.T) {
	type args struct {
		binaryDefinition string
	}
	tests := []struct {
		name string
		args args
		want packet
	}{
		{
			name: "Literal Representation",
			args: args{
				binaryDefinition: "110100101111111000101000",
			},
			want: packet{
				version:      6,
				binary:       "110100101111111000101000",
				packetTypeId: 4,
				value:        2021,
			},
		},
		{
			name: "Operator Type 1",
			args: args{
				binaryDefinition: "00111000000000000110111101000101001010010001001000000000",
			},
			want: packet{
				version:      1,
				binary:       "00111000000000000110111101000101001010010001001000000000",
				packetTypeId: 6,
				subPackets: []packet{
					{
						binary:               "",
						packetTypeId:         0,
						version:              0,
						subPacketLength:      0,
						subPacketLengthValue: 0,
						numberOfSubPackets:   0,
						value:                10,
						subPackets:           []packet{},
					},
					{
						binary:               "",
						packetTypeId:         0,
						version:              0,
						subPacketLength:      0,
						subPacketLengthValue: 0,
						numberOfSubPackets:   0,
						value:                20,
						subPackets:           []packet{},
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := binaryString{}
			for _, value := range strings.Split(tt.args.binaryDefinition, "") {
				b = append(b, value)
			}
			got := b.Parse()
			if !reflect.DeepEqual(got.version, tt.want.version) {
				t.Errorf("Version = %v, want %v", got.version, tt.want.version)
			}

			if !reflect.DeepEqual(got.packetTypeId, tt.want.packetTypeId) {
				t.Errorf("packetTypeId = %v, want %v", got.packetTypeId, tt.want.packetTypeId)
			}
			if !reflect.DeepEqual(got.value, tt.want.value) {
				t.Errorf("Value = %v, want %v", got.value, tt.want.value)
			}

			for i, p := range tt.want.subPackets {
				if p.value != got.subPackets[i].value {
					t.Errorf("Value = %v, want %v", got.subPackets[i].value, p.value)
				}
			}
		})
	}
}

func TestSumVersions(t *testing.T) {
	type args struct {
		hex string
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "Operator Type 1",
			args: args{
				hex: "8A004A801A8002F478",
			},
			want: 16,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			bs := hexToBinary(tt.args.hex)
			b := binaryString{}
			for _, value := range strings.Split(bs, "") {
				b = append(b, value)
			}
			parsed := b.Parse()
			actual := parsed.sumVersions()
			if actual != tt.want {
				t.Errorf("version sum = %v, want %v", actual, tt.want)
			}
		})
	}
}

func TestPart2(t *testing.T) {
	type args struct {
		hex string
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "Example",
			args: args{
				hex: "C200B40A82",
			},
			want: 3,
		},
		{
			name: "Example",
			args: args{
				hex: "04005AC33890",
			},
			want: 54,
		},
		{
			name: "Example",
			args: args{
				hex: "880086C3E88112",
			},
			want: 7,
		},
		{
			name: "Example",
			args: args{
				hex: "CE00C43D881120",
			},
			want: 9,
		},
		{
			name: "Example",
			args: args{
				hex: "D8005AC2A8F0",
			},
			want: 1,
		},
		{
			name: "Example",
			args: args{
				hex: "F600BC2D8F",
			},
			want: 0,
		},
		{
			name: "Example",
			args: args{
				hex: "9C005AC2F8F0",
			},
			want: 0,
		},
		{
			name: "Example",
			args: args{
				hex: "9C0141080250320F1802104A08",
			},
			want: 1,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			bs := hexToBinary(tt.args.hex)
			b := binaryString{}
			for _, value := range strings.Split(bs, "") {
				b = append(b, value)
			}
			parsed := b.Parse()
			actual := parsed.part2()
			if actual != tt.want {
				t.Errorf("version sum = %v, want %v", actual, tt.want)
			}
		})
	}
}
